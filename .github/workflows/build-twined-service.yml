# Build and push an Octue Twined service revision image to an artifact registry, optionally registering it with a service registry.

name: build-twined-service

on:
  workflow_call:
    inputs:
      gcp_project_name:
        type: string
        required: true
      gcp_project_number:
        type: string
        required: true
      gcp_region:
        type: string
        required: true
      service_namespace:
        type: string
        required: true
      gcp_service_name:
        type: string
        required: true
      gcp_environment:
        type: string
        required: false
        default: 'main'
      dockerfile_url:
        type: string
        required: false
        default: 'https://raw.githubusercontent.com/octue/octue-sdk-python/refs/heads/rc-kueue/octue/cloud/deployment/dockerfiles/Dockerfile-python311'
        description: Use the default Octue Twined data service dockerfile (based on python3.11).
      local_dockerfile:
        type: string
        required: false
        default: ''
        description: Use a local Dockerfile at this path e.g. './Dockerfile'. Not used by default; overrides the `dockerfile_url` input.
      service_registry_endpoint:
        type: string
        required: false
        default: ''
      repository:
        type: string
        required: false
        default: ""
        description: Deploy a service from a remote repository e.g. "octue/example-service-cloud-run". Defaults to the current repository.
      ref:
        type: string
        required: false
        default: ""
        description: If deploying from a remote repository, use this ref (a commit ref, branch, or tag). Defaults to the the default branch of the repository.
      use_local_service_configuration:
        type: boolean
        required: false
        default: false
        description: If deploying from a remote repository, override its service configuration from the local repository.
      use_local_app_configuration:
        type: boolean
        required: false
        default: false
        description: If deploying from a remote repository, override its app configuration from the local repository.
      env_vars:
        type: string
        required: false
        default: ""
        description: '[WARNING: CURRENTLY UNAVAILABLE] Additional environment variables to pass to the the deployed container in comma-separated form e.g. "VAR1=SOMETHING,VAR2=20". See here for more information: https://github.com/google-github-actions/deploy-cloudrun#user-content-env_vars'


jobs:
  info:
    runs-on: ubuntu-latest

    timeout-minutes: 5

    permissions:
      contents: read

    outputs:
      branch_tag_kebab: ${{ steps.get-deployment-info.outputs.branch_tag_kebab}}
      image_latest_artifact: ${{ steps.get-deployment-info.outputs.image_latest_artifact}}
      image_version_artifact: ${{ steps.get-deployment-info.outputs.image_version_artifact}}
      image_default_artifact: ${{ steps.get-deployment-info.outputs.image_default_artifact}}
      gcp_project_name: ${{ steps.get-deployment-info.outputs.gcp_project_name}}
      gcp_project_number: ${{ steps.get-deployment-info.outputs.gcp_project_number}}
      gcp_region: ${{ steps.get-deployment-info.outputs.gcp_region}}
      gcp_resource_affix: ${{ steps.get-deployment-info.outputs.gcp_resource_affix}}
      gcp_service_name: ${{ steps.get-deployment-info.outputs.gcp_service_name}}
      revision_tag: ${{ steps.get-deployment-info.outputs.revision_tag }}
      revision_tag_slug: ${{ steps.get-deployment-info.outputs.revision_tag_slug }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Get deployment info
        id: get-deployment-info
        uses: octue/get-deployment-info@0.4.2
        with:
          gcp_project_name: ${{ inputs.gcp_project_name }}
          gcp_project_number: ${{ inputs.gcp_project_number }}
          gcp_region: ${{ inputs.gcp_region }}
          gcp_resource_affix: ${{ inputs.service_namespace }}
          gcp_service_name: ${{ inputs.gcp_service_name }}

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: info

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout local repository
        uses: actions/checkout@v4

      - name: Checkout remote repository
        if: ${{ inputs.repository }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          path: remote

      - name: Override remote repository service configuration
        if: ${{ (inputs.repository != '') && (inputs.use_local_service_configuration == 'true') }}
        run: cp octue.yaml remote/octue.yaml

      - name: Override remote repository app configuration
        if: ${{ (inputs.repository != '') && (inputs.use_local_app_configuration == 'true') }}
        run: cp app_configuration.json remote/app_configuration.json

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate with GCP Workload Identity
        id: auth
        uses: google-github-actions/auth@v2
        with:
          # NOTE: If setting create_credentials_file=true, .dockerignore file must include `gha-creds-*.json` to avoid baking these credentials into build
          create_credentials_file: true
          workload_identity_provider: projects/${{ needs.info.outputs.gcp_project_number }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions@${{ needs.info.outputs.gcp_project_name }}.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ needs.info.outputs.gcp_region }}-docker.pkg.dev

      - name: Get dockerfile
        if: ${{ inputs.local_dockerfile == '' }}
        run: wget -O Dockerfile ${{ inputs.dockerfile_url }}

      - name: Choose context for docker build
        id: choose-build-context
        run: |
          if [ "${{ inputs.repository }}" = "" ]; then
            echo "context=." >> $GITHUB_OUTPUT
          else
            echo "context=remote" >> $GITHUB_OUTPUT
          fi

      - name: Get dockerfile path
        id: get-dockerfile-path
        run: |
          if [ "${{ inputs.local_dockerfile }}" = "" ]; then
            echo "dockerfile_path=${{ steps.choose-build-context.outputs.context }}/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_path=${{ steps.choose-build-context.outputs.context }}/${{ inputs.local_dockerfile }}" >> $GITHUB_OUTPUT
          fi

      - name: Choose docker image tags
        id: image-tags
        run: |
          if [ ${{ needs.info.outputs.branch_tag_kebab }} = "main" ]; then
            echo "tags=${{ needs.info.outputs.image_version_artifact }},${{ needs.info.outputs.image_latest_artifact }},${{ needs.info.outputs.image_default_artifact }}"  >> $GITHUB_OUTPUT
          else
            echo "tags=${{ needs.info.outputs.image_version_artifact }},${{ needs.info.outputs.image_latest_artifact }}"  >> $GITHUB_OUTPUT
          fi

      - name: Build and push container with latest and version tags
        # Note: We don't push containers with shas because we'd end up with terabytes in storage (an image for every commit)
        uses: docker/build-push-action@v6
        with:
          context: "${{ steps.choose-build-context.outputs.context }}"
          platforms: linux/amd64
          file: ${{ steps.get-dockerfile-path.outputs.dockerfile_path }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.image-tags.outputs.tags }}

      - name: Register service revision
        if: ${{ inputs.service_registry_endpoint != '' }}
        uses: octue/register-service-revision@0.2.0
        with:
          service_namespace: ${{ needs.info.outputs.gcp_resource_affix }}
          service_name: ${{ needs.info.outputs.gcp_service_name }}
          service_revision_tag: ${{ needs.info.outputs.revision_tag }}
          is_default: "false"
          service_registry_endpoint: ${{ inputs.service_registry_endpoint }}

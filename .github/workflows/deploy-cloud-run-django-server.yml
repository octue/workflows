# Deploy a Django service to Google Cloud Run.

name: deploy-cloud-run-django-server

on:
  workflow_call:
    inputs:
      gcp_project_name:
        type: string
        required: true
      gcp_project_number:
        type: string
        required: true
      gcp_region:
        type: string
        required: true
      gcp_resource_affix:
        type: string
        required: true
      server_name:
        type: string
        required: true
      dockerfile:
        type: string
        required: false
        default: ""
        description: The path from the repository root to the Dockerfile for your container's image; defaults to "./Dockerfile" (a Dockerfile in the repository root).
      build_args:
        type: string
        description: Line-separated list of build-time variables.
        required: false
        default: ""
      cloud_run_flags:
        type: string
        required: false
        default: '--ingress=all --allow-unauthenticated'
      django_settings_module:
        type: string
        required: false
        default: ""
        description: Defaults to "<server_name>.settings"
      env_vars:
        type: string
        required: false
        default: ''
        description: 'Additional environment variables to use with the `collectstatic` and `migrate` steps. Provide in comma-separated form e.g. "VAR1=SOMETHING,VAR2=20".'
      gcp_secrets:
        type: string
        required: false
        default: ''
        description: 'Secrets from GCP Secret Manager to use with the `collectstatic` and `migrate` steps. Provide in comma-separated form with each secret in the form "ENVIRONMENT_VARIABLE:secret-path" e.g. "FIRST_SECRET:my-project/first-secret,SECOND_SECRET:my-project/second-secret"'

    secrets:
      build_secrets:
        description: "Line-separated list of build-time secrets."
        required: false


jobs:
  info:
    runs-on: ubuntu-latest

    timeout-minutes: 5

    permissions:
      contents: read

    outputs:
      branch_tag_kebab: ${{ steps.get-deployment-info.outputs.branch_tag_kebab }}
      branch_tag_screaming: ${{ steps.get-deployment-info.outputs.branch_tag_screaming}}
      image_latest_artifact: ${{ steps.get-deployment-info.outputs.image_latest_artifact}}
      image_latest_tag: ${{ steps.get-deployment-info.outputs.image_latest_tag }}
      image_version_artifact: ${{ steps.get-deployment-info.outputs.image_version_artifact}}
      image_version_tag: ${{ steps.get-deployment-info.outputs.image_version_tag }}
      short_sha: ${{ steps.get-deployment-info.outputs.short_sha }}
      gcp_project_name: ${{ steps.get-deployment-info.outputs.gcp_project_name}}
      gcp_project_number: ${{ steps.get-deployment-info.outputs.gcp_project_number}}
      gcp_region: ${{ steps.get-deployment-info.outputs.gcp_region}}
      gcp_resource_affix: ${{ steps.get-deployment-info.outputs.gcp_resource_affix}}
      server_name: ${{ steps.get-deployment-info.outputs.gcp_service_name}}
      version: ${{ steps.get-deployment-info.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Get deployment info
        id: get-deployment-info
        uses: octue/get-deployment-info@0.3.3
        with:
          gcp_project_name: ${{ inputs.gcp_project_name }}
          gcp_project_number: ${{ inputs.gcp_project_number }}
          gcp_region: ${{ inputs.gcp_region }}
          gcp_resource_affix: ${{ inputs.gcp_resource_affix }}
          gcp_service_name: ${{ inputs.server_name }}

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: info

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with GCP Workload Identity
        id: auth
        uses: google-github-actions/auth@v2
        with:
          # NOTE: If setting create_credentials_file=true, .dockerignore file must include `gha-creds-*.json` to avoid baking these credentials into build
          create_credentials_file: true
          workload_identity_provider: projects/${{ needs.info.outputs.gcp_project_number }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions@${{ needs.info.outputs.gcp_project_name }}.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ needs.info.outputs.gcp_region }}-docker.pkg.dev

      - name: Get dockerfile path
        id: get-dockerfile-path
        run: |
          if [ "${{ inputs.dockerfile }}" = "" ]; then
            echo "dockerfile_path=./Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_path=${{ inputs.dockerfile }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push artifact with latest and version tags
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          file: ${{ steps.get-dockerfile-path.outputs.dockerfile_path }}
          build-args: ${{ inputs.build_args }}
          secrets: |
            "${{ secrets.build_secrets }}"
          load: false
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ needs.info.outputs.image_version_artifact }}
            ${{ needs.info.outputs.image_latest_artifact }}

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs:
      - build
      - info

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        # Shouldn't be necessary since we pull code in an image, but it's required by google-github-actions/auth
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with GCP Workload Identity
        id: auth
        uses: google-github-actions/auth@v2
        with:
          # NOTE: If setting create_credentials_file=true, .dockerignore file must include `gha-creds-*.json` to avoid baking these credentials into build
          create_credentials_file: true
          workload_identity_provider: projects/${{ needs.info.outputs.gcp_project_number }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions@${{ needs.info.outputs.gcp_project_name }}.iam.gserviceaccount.com

      - name: Setup GCloud CLI
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Get and show Secret Manager prefix
        id: secrets_prefix
        run: |
          export prefix=${{ needs.info.outputs.gcp_project_name }}/${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}
          echo "prefix=$prefix" >> $GITHUB_OUTPUT
          echo "Secret Manager prefix: $prefix"

      - name: Access GCP Secret Manager
        id: secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            DATABASE_URL:${{ steps.secrets_prefix.outputs.prefix }}-db-proxy-uri
            DJANGO_SECRET_KEY:${{ steps.secrets_prefix.outputs.prefix }}-django-secret-key
            GOOGLE_APPLICATION_CREDENTIALS:${{ steps.secrets_prefix.outputs.prefix }}-google-application-credentials
            ${{ inputs.gcp_secrets }}

      - name: Connect to Cloud SQL
        # Note the DATABASE_URL should point to the proxy, i.e. localhost:5432, not to the actual DB
        uses: wagnerpereira/gce-cloudsql-proxy-action@v2
        with:
          instance: ${{ needs.info.outputs.gcp_project_name }}:${{ needs.info.outputs.gcp_region }}:${{ needs.info.outputs.gcp_resource_affix }}-dbinstance-${{ needs.info.outputs.branch_tag_kebab }}

      - name: Store GCP credentials in a file
        # Pipe the credentials secret value to disk, allowing it to be mounted in the container just like in cloud run.
        # This lets us use the same secrets pattern as the cloud run service to do the release.
        id: store-gcp-credentials-in-file
        run: |
          FILENAME=gha-creds-from-secret-manager.json
          echo "credentials_file_name=$FILENAME" >> $GITHUB_OUTPUT
          echo '${{ steps.secrets.outputs.GOOGLE_APPLICATION_CREDENTIALS }}' > $(pwd)/$FILENAME
          echo "credentials_file_path=$(pwd)/$FILENAME" >> $GITHUB_OUTPUT

      - name: Show credentials filename and path
        run: |
          echo "Credentials credentials_file_name: ${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_name }}"
          echo "Credentials credentials_file_path: ${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_path }}"

      - name: Get DJANGO_SETTINGS_MODULE
        id: django-settings
        run: |
          if [ "${{ inputs.django_settings_module }}" = "" ]; then
            echo "django_settings_module=${{ needs.info.outputs.server_name }}.settings" >> $GITHUB_OUTPUT
          else
            echo "django_settings_module=${{ inputs.django_settings_module }}" >> $GITHUB_OUTPUT
          fi

      - name: Set environment variables in .env file
        # Set here rather than piped directly to the container, to allow us to usefully debug later steps of this action via reverse shell
        run: |
          touch .env
          echo "DATABASE_URL=${{ steps.secrets.outputs.DATABASE_URL }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ steps.secrets.outputs.DJANGO_SECRET_KEY }}" >> .env
          echo "DJANGO_SETTINGS_MODULE=${{ steps.django-settings.outputs.django_settings_module }}" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=/workspace/${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_name }}" >> .env
          echo "GCP_TASKS_RESOURCE_AFFIX=${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}" >> .env
          echo "GCP_TASKS_DEFAULT_QUEUE_NAME=${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}" >> .env
          echo "GCP_TASKS_DOMAIN=https://doesnt-matter-because-tasks-should-get-mocked.com" >> .env
          echo "GCP_REGION=${{ needs.info.outputs.gcp_region }}" >> .env
          echo "GCP_RESOURCE_AFFIX=${{ needs.info.outputs.gcp_resource_affix }}" >> .env
          echo "GCP_ENVIRONMENT=${{ needs.info.outputs.branch_tag_kebab }}" >> .env

      - name: Add additional envvars to .env file
        if: ${{ inputs.env_vars != '' }}
        run: |
          split_env_vars=($(echo ${{ inputs.env_vars }} | tr "," "\n"))

          for var in "${split_env_vars[@]}";
          do
            echo "$var" >> .env
          done

      - name: Export secrets to JSON
        run: echo '${{ toJSON(steps.secrets.outputs) }}' >> secrets.json

      - name: Remove GOOGLE_APPLICATION_CREDENTIALS value from secrets.json
        run: jq 'del(.GOOGLE_APPLICATION_CREDENTIALS)' secrets.json > secrets2.json

      - name: Add secrets to .env file
        run: |
          function append_json_to_env () {
            INPUT_FILE="${1}"
            while IFS=$'\t\n' read -r LINE; do
                echo "${LINE}" >> .env
            done < <(
                <"${INPUT_FILE}" jq \
                    --compact-output \
                    --raw-output \
                    --monochrome-output \
                    --from-file \
                    <(echo 'to_entries | map("\(.key)=\(.value)") | .[]')
            )
          }
          
          append_json_to_env secrets2.json

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ needs.info.outputs.gcp_region }}-docker.pkg.dev

      - name: Create start script and print instructions [DEBUG]
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true'}}
        run: |
          echo "docker run \
            --network="host" \
            --env-file .env \
            --volume ${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_path }}:/workspace/${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_name }} \
            -it \
            --rm \
            ${{ needs.info.outputs.image_version_artifact }} \
            bash
          " >> start.sh
          echo "Exec into the container by running "sh start.sh"."

      - name: Setup tmate session [DEBUG]
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true'}}
        uses: mxschmitt/action-tmate@v3
        env:
          PERSONAL_ACCESS_TOKEN_GITHUB: ${{ secrets.PACKAGE_TOKEN_GITHUB }}

        # TODO Could do this as a job, now that cloud run jobs are in preview
      - name: Collect static files (in cloud run equivalent environment)
        id: collect-static
        # Don't deploy if manually dispatched or debugging
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.debug_enabled != 'true'}}
        run: |
          docker run \
            --network="host" \
            --env-file .env \
            --volume ${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_path }}:/workspace/${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_name }} \
            --rm \
            ${{ needs.info.outputs.image_version_artifact }} \
            python manage.py collectstatic -v2 --no-input

      - name: Migrate database (in cloud run equivalent environment)
        id: migrate-database
        # Don't deploy if manually dispatched or debugging
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.debug_enabled != 'true'}}
        run: |
          docker run \
            --network="host" \
            --env-file .env \
            --volume ${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_path }}:/workspace/${{ steps.store-gcp-credentials-in-file.outputs.credentials_file_name }} \
            --rm \
            ${{ needs.info.outputs.image_version_artifact }} \
            python manage.py migrate -v2 --no-input

      # - name: Deploy to Cloud Run Worker
      #   id: deploy-worker
      #   if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.debug_enabled != 'true'}}
      #   uses: google-github-actions/deploy-cloudrun@v2
      #   with:
      #     env_vars: |
      #       ATOMIC_REQUESTS=0
      #       GCP_TASKS_RESOURCE_AFFIX=${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}
      #       GCP_TASKS_DEFAULT_QUEUE_NAME=${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}-default
      #       GCP_TASKS_DOMAIN=https://sha${{ needs.info.outputs.short_sha }}---${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}-worker-fhngvhbkyq-ew.a.run.app/
      #     image: ${{ needs.info.outputs.image_version_artifact }}
      #     region: ${{ needs.info.outputs.gcp_region }}
      #     service: example-worker-${{ needs.info.outputs.branch_tag_kebab }}
      #     tag: sha${{ needs.info.outputs.short_sha }}

      - name: Deploy to Cloud Run Server
        id: deploy-server
        # Don't deploy if manually dispatched or debugging
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.debug_enabled != 'true'}}
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          # Currently places tasks onto itself. To place tasks onto a worker, use the following:
          # GCP_TASKS_DOMAIN=${{ steps.deploy_worker.outputs.url }}
          env_vars: |
            DJANGO_SETTINGS_MODULE=${{ steps.django-settings.outputs.django_settings_module }}
            GCP_TASKS_RESOURCE_AFFIX=${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}
            GCP_TASKS_DEFAULT_QUEUE_NAME=${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}-default
            GCP_TASKS_DOMAIN=https://sha${{ needs.info.outputs.short_sha }}---${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}-${{ needs.info.outputs.server_name }}-${{ needs.info.outputs.gcp_project_number }}.${{ needs.info.outputs.gcp_region }}.run.app
          image: ${{ needs.info.outputs.image_version_artifact }}
          region: ${{ needs.info.outputs.gcp_region }}
          service: ${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.branch_tag_kebab }}-${{ needs.info.outputs.server_name }}
          tag: sha${{ needs.info.outputs.short_sha }}
          flags: ${{ inputs.cloud_run_flags }}

      # TODO unapply the migration if it or the deployment(s) failed
      - name: Show Cloud Run Deployment URLs
        run: |
          echo "${{ steps.deploy-server.outputs.url }}"
      #     echo "${{ steps.deploy-worker.outputs.url }}"

# Deploy an Octue service to Cloud Run, optionally registering it with a service registry.

name: deploy-cloud-run-service

on:
  workflow_call:
    inputs:
      gcp_project_name:
        type: string
        required: true
      gcp_project_number:
        type: string
        required: true
      gcp_region:
        type: string
        required: true
      gcp_resource_affix:
        type: string
        required: true
      gcp_service_name:
        type: string
        required: true
      gcp_environment:
        type: string
        required: false
        default: 'main'
      dockerfile_url:
        type: string
        required: false
        default: 'https://raw.githubusercontent.com/octue/octue-sdk-python/main/octue/cloud/deployment/google/cloud_run/Dockerfile'
      local_dockerfile:
        type: string
        required: false
        default: ''
        description: Use a local Dockerfile at this path e.g. './Dockerfile'. Overrides the `dockerfile_url` input.
      service_registry_url:
        type: string
        required: false
        default: ''
      cloud_run_flags:
        type: string
        required: false
        default: '--ingress=all --allow-unauthenticated'


jobs:
  info:
    runs-on: ubuntu-latest

    timeout-minutes: 5

    permissions:
      contents: read

    outputs:
      image_latest_artifact: ${{ steps.get-deployment-info.outputs.image_latest_artifact}}
      image_version_artifact: ${{ steps.get-deployment-info.outputs.image_version_artifact}}
      gcp_project_name: ${{ steps.get-deployment-info.outputs.gcp_project_name}}
      gcp_project_number: ${{ steps.get-deployment-info.outputs.gcp_project_number}}
      gcp_region: ${{ steps.get-deployment-info.outputs.gcp_region}}
      gcp_resource_affix: ${{ steps.get-deployment-info.outputs.gcp_resource_affix}}
      gcp_service_name: ${{ steps.get-deployment-info.outputs.gcp_service_name}}
      revision_tag: ${{ steps.get-deployment-info.outputs.revision_tag }}
      revision_tag_slug: ${{ steps.get-deployment-info.outputs.revision_tag_slug }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        uses: snok/install-poetry@v1

      - name: Get deployment info
        id: get-deployment-info
        uses: octue/get-deployment-info@0.2.1
        with:
          gcp_project_name: ${{ inputs.gcp_project_name }}
          gcp_project_number: ${{ inputs.gcp_project_number }}
          gcp_region: ${{ inputs.gcp_region }}
          gcp_resource_affix: ${{ inputs.gcp_resource_affix }}
          gcp_service_name: ${{ inputs.gcp_service_name }}
          gcp_environment: ${{ inputs.gcp_environment }}

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: info

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate with GCP Workload Identity
        id: auth
        uses: google-github-actions/auth@v2
        with:
          # NOTE: If setting create_credentials_file=true, .dockerignore file must include `gha-creds-*.json` to avoid baking these credentials into build
          create_credentials_file: true
          workload_identity_provider: projects/${{ needs.info.outputs.gcp_project_number }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions@${{ needs.info.outputs.gcp_project_name }}.iam.gserviceaccount.com

      - name: Setup gcloud
        uses: "google-github-actions/setup-gcloud@v0"

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ needs.info.outputs.gcp_region }}-docker.pkg.dev

      - name: Get dockerfile
        if: ${{ inputs.local_dockerfile == '' }}
        run: wget ${{ inputs.dockerfile_url }}

      - name: Get dockerfile path
        id: get-dockerfile-path
        run: |
          if [ "${{ inputs.local_dockerfile }}" = "" ]; then
            echo "dockerfile_path=./Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_path=${{ inputs.local_dockerfile }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push container with latest and version tags
        # Note: We don't push containers with shas because we'd end up with terabytes in storage (an image for every commit)
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64
          file: ${{ steps.get-dockerfile-path.outputs.dockerfile_path }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ needs.info.outputs.image_version_artifact}}
            ${{ needs.info.outputs.image_latest_artifact}}

      - name: Deploy to Cloud Run service
        id: deploy-service
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          env_vars: |
            OCTUE_SERVICE_NAMESPACE=${{ needs.info.outputs.gcp_resource_affix }}
            OCTUE_SERVICE_NAME=${{ needs.info.outputs.gcp_service_name }}
            OCTUE_SERVICE_REVISION_TAG=${{ needs.info.outputs.revision_tag }}
            COMPUTE_PROVIDER=GOOGLE_CLOUD_RUN
          service: ${{ needs.info.outputs.gcp_resource_affix }}-${{ needs.info.outputs.gcp_service_name }}
          image: ${{ needs.info.outputs.image_version_artifact }}
          region: ${{ needs.info.outputs.gcp_region }}
          tag: v${{ needs.info.outputs.revision_tag_slug }}
          timeout: 3600
          flags: "${{ inputs.cloud_run_flags }}"

      - name: Show deployed service URL
        run: echo "${{ steps.deploy-service.outputs.url }}"

      - name: Create topic and subscription
        uses: octue/create-push-subscription@0.2.2
        with:
          project_name: ${{ needs.info.outputs.gcp_project_name }}
          service_namespace: ${{ needs.info.outputs.gcp_resource_affix }}
          service_name: ${{ needs.info.outputs.gcp_service_name }}
          service_revision_tag: ${{ needs.info.outputs.revision_tag }}
          push_endpoint: ${{ steps.deploy-service.outputs.url }}

      - name: Register service revision
        if: ${{ inputs.service_registry_url != '' }}
        uses: octue/register-service-revision@0.2.0
        with:
          service_namespace: ${{ needs.info.outputs.gcp_resource_affix }}
          service_name: ${{ needs.info.outputs.gcp_service_name }}
          service_revision_tag: ${{ needs.info.outputs.revision_tag }}
          is_default: "false"
          service_registry_endpoint: https://api.windquest.app/integrations/octue/services
